#!/bin/bash

# Reset shell colors
tput init

# Determinar o diretório raiz do projeto
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do
  PROJECT_ROOT="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$PROJECT_ROOT/$SOURCE"
done
PROJECT_ROOT="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"

# Imports necessários
source "${PROJECT_ROOT}"/variables/manifest.sh
source "${PROJECT_ROOT}"/utils/manifest.sh
source "${PROJECT_ROOT}"/lib/manifest.sh

# Criar arquivo de configuração se não existir
if [[ ! -e "${PROJECT_ROOT}"/config ]]; then
  cat << EOF > "${PROJECT_ROOT}"/config
deploy_password=senha_local
mysql_root_password=rootpass
db_pass=dbpass_local
EOF
fi

# Ajustar permissões
sudo chown "$USER:$USER" "${PROJECT_ROOT}"/config
chmod 600 "${PROJECT_ROOT}"/config
source "${PROJECT_ROOT}"/config

# Função interativa
inquiry_options

# Backend
system_git_clone
backend_set_env
backend_redis_create() {
  docker ps -a | grep redis-local || docker run -d --name redis-local -p 6379:6379 redis
}
backend_node_dependencies() {
  cd "${PROJECT_ROOT}/backend" && npm install
}
backend_node_build() {
  cd "${PROJECT_ROOT}/backend" && npm run build
}
backend_db_migrate
backend_db_seed
backend_start_pm2() {
  cd "${PROJECT_ROOT}/backend" && pm2 start npm --name "backend" -- run start
}

# Frontend
frontend_set_env
frontend_node_dependencies() {
  cd "${PROJECT_ROOT}/frontend" && npm install
}
frontend_node_build() {
  cd "${PROJECT_ROOT}/frontend" && npm run build
}
frontend_start_pm2() {
  cd "${PROJECT_ROOT}/frontend" && pm2 start npm --name "frontend" -- run start
}

# Rede
system_nginx_restart() {
  sudo service nginx restart || echo "NGINX não instalado, ignorando."
}

system_nginx_restart

echo "Instância local configurada! Backend e frontend rodando em localhost."
